{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/DJ-SITE/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/InView.tsx\nimport * as React from \"react\";\n\n// src/observe.ts\nvar observerMap = /* @__PURE__ */new Map();\nvar RootIds = /* @__PURE__ */new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = void 0;\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\nfunction getRootId(root) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== void 0;\n  }).map(function (key) {\n    return \"\".concat(key, \"_\").concat(key === \"root\" ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n  if (!instance) {\n    var elements = /* @__PURE__ */new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _a;\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        });\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          entry.isVisible = inView;\n        }\n        (_a = elements.get(entry.target)) == null ? void 0 : _a.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\nfunction observe(element, callback) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n  if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== void 0) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {};\n  }\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements;\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\n// src/InView.tsx\nfunction isPlainChildren(props) {\n  return typeof props.children !== \"function\";\n}\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inherits(InView, _React$Component);\n  var _super = _createSuper(InView);\n  function InView(props) {\n    var _this;\n    _classCallCheck(this, InView);\n    _this = _super.call(this, props);\n    __publicField(_assertThisInitialized(_this), \"node\", null);\n    __publicField(_assertThisInitialized(_this), \"_unobserveCb\", null);\n    __publicField(_assertThisInitialized(_this), \"handleNode\", function (node) {\n      if (_this.node) {\n        _this.unobserve();\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: void 0\n          });\n        }\n      }\n      _this.node = node ? node : null;\n      _this.observeNode();\n    });\n    __publicField(_assertThisInitialized(_this), \"handleChange\", function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        _this.unobserve();\n      }\n      if (!isPlainChildren(_this.props)) {\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n      if (_this.props.onChange) {\n        _this.props.onChange(inView, entry);\n      }\n    });\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: void 0\n    };\n    return _this;\n  }\n  _createClass(InView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n        this.unobserve();\n        this.observeNode();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unobserve();\n      this.node = null;\n    }\n  }, {\n    key: \"observeNode\",\n    value: function observeNode() {\n      if (!this.node || this.props.skip) return;\n      var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n      this._unobserveCb = observe(this.node, this.handleChange, {\n        threshold: threshold,\n        root: root,\n        rootMargin: rootMargin,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, {\n    key: \"unobserve\",\n    value: function unobserve() {\n      if (this._unobserveCb) {\n        this._unobserveCb();\n        this._unobserveCb = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      if (typeof children === \"function\") {\n        var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n        return children({\n          inView: inView,\n          entry: entry,\n          ref: this.handleNode\n        });\n      }\n      var _this$props2 = this.props,\n        as = _this$props2.as,\n        triggerOnce = _this$props2.triggerOnce,\n        threshold = _this$props2.threshold,\n        root = _this$props2.root,\n        rootMargin = _this$props2.rootMargin,\n        onChange = _this$props2.onChange,\n        skip = _this$props2.skip,\n        trackVisibility = _this$props2.trackVisibility,\n        delay = _this$props2.delay,\n        initialInView = _this$props2.initialInView,\n        fallbackInView = _this$props2.fallbackInView,\n        props = _objectWithoutProperties(_this$props2, _excluded);\n      return React.createElement(as || \"div\", _objectSpread({\n        ref: this.handleNode\n      }, props), children);\n    }\n  }]);\n  return InView;\n}(React.Component);\n\n// src/useInView.tsx\nimport * as React2 from \"react\";\nfunction useInView() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView,\n    fallbackInView = _ref.fallbackInView,\n    onChange = _ref.onChange;\n  var _a;\n  var _React2$useState = React2.useState(null),\n    _React2$useState2 = _slicedToArray(_React2$useState, 2),\n    ref = _React2$useState2[0],\n    setRef = _React2$useState2[1];\n  var callback = React2.useRef();\n  var _React2$useState3 = React2.useState({\n      inView: !!initialInView,\n      entry: void 0\n    }),\n    _React2$useState4 = _slicedToArray(_React2$useState3, 2),\n    state = _React2$useState4[0],\n    setState = _React2$useState4[1];\n  callback.current = onChange;\n  React2.useEffect(function () {\n    if (skip || !ref) return;\n    var unobserve;\n    unobserve = observe(ref, function (inView, entry) {\n      setState({\n        inView: inView,\n        entry: entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        unobserve();\n        unobserve = void 0;\n      }\n    }, {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: threshold,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n    return function () {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  var entryTarget = (_a = state.entry) == null ? void 0 : _a.target;\n  var previousEntryTarget = React2.useRef();\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: void 0\n    });\n  }\n  var result = [setRef, state.inView, state.entry];\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"names":["React","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","concat","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_a","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","arguments","length","undefined","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","callbacks","push","unobserve","splice","indexOf","delete","size","disconnect","isPlainChildren","props","children","InView","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","__publicField","_assertThisInitialized","node","triggerOnce","skip","setState","initialInView","observeNode","onChange","state","_createClass","value","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","_unobserveCb","handleChange","render","_this$state","ref","handleNode","_this$props2","as","_objectWithoutProperties","_excluded","createElement","_objectSpread","Component","React2","useInView","_ref","_React2$useState","useState","_React2$useState2","_slicedToArray","setRef","useRef","_React2$useState3","_React2$useState4","current","useEffect","entryTarget","previousEntryTarget","result"],"sources":["/workspaces/DJ-SITE/frontend/node_modules/src/InView.tsx","/workspaces/DJ-SITE/frontend/node_modules/src/observe.ts","/workspaces/DJ-SITE/frontend/node_modules/src/useInView.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}