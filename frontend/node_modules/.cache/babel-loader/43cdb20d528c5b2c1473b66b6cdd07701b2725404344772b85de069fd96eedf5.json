{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport { listReducer as defaultReducer } from './listReducer';\nimport { useListChangeNotifiers } from './useListChangeNotifiers';\nimport { useControllableReducer } from '../utils/useControllableReducer';\nimport { areArraysEqual } from '../utils/areArraysEqual';\nimport { useLatest } from '../utils/useLatest';\nimport { useTextNavigation } from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsItemDisabled = () => false;\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n\n/**\r\n * The useList is a lower-level utility that is used to build list-like components.\r\n * It's used to manage the state of the list and its items.\r\n *\r\n * Supports highlighting a single item and selecting an arbitrary number of items.\r\n *\r\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\r\n * controlled from outside.\r\n *\r\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\r\n * Also the actions that can be dispatched and the reducer function can be defined externally.\r\n *\r\n * @template ItemValue The type of the item values.\r\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\r\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\r\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\r\n *\r\n * @ignore - internal hook.\r\n */\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    onItemsChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n    onItemsChange == null ? void 0 : onItemsChange(items);\n  }, [items, itemComparer, dispatch, onItemsChange]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\nexport { useList };","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","ListActionTypes","listReducer","defaultReducer","useListChangeNotifiers","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","EMPTY_OBJECT","NOOP","defaultItemComparer","optionA","optionB","defaultIsItemDisabled","defaultItemStringifier","item","String","defaultGetInitialState","highlightedValue","selectedValues","useList","params","controlledProps","disabledItemsFocusable","disableListWrap","focusManagement","getInitialState","getItemDomElement","getItemId","isItemDisabled","rootRef","externalListRef","onStateChange","items","itemComparer","getItemAsString","onChange","onHighlightChange","onItemsChange","orientation","pageSize","reducerActionContext","selectionMode","stateReducer","externalReducer","process","env","NODE_ENV","Error","listRef","useRef","handleRef","handleHighlightChange","useCallback","event","value","reason","itemClick","keyDown","textNavigation","_getItemDomElement","focus","stateComparers","useMemo","valuesArray1","valuesArray2","handleStateChange","field","state","listActionContext","initialState","reducer","actionContext","dispatch","handleTextNavigation","searchString","type","latestSelectedValues","latestHighlightedValue","previousItems","useEffect","current","itemsChange","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","createHandleKeyDown","other","_other$onKeyDown","onKeyDown","call","defaultMuiPrevented","keysToPreventDefault","push","includes","key","preventDefault","createHandleBlur","_other$onBlur","_listRef$current","onBlur","contains","relatedTarget","blur","getRootProps","otherHandlers","undefined","tabIndex","ref","getItemState","_latestSelectedValues","index","findIndex","i","selected","some","disabled","highlighted","focusable","contextValue","useDebugValue"],"sources":["C:/Users/qskov/OneDrive/Рабочий стол/DJ-SITE/DJ-SITE/frontend/node_modules/@mui/base/useList/useList.js"],"sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport { ListActionTypes } from './listActions.types';\r\nimport { listReducer as defaultReducer } from './listReducer';\r\nimport { useListChangeNotifiers } from './useListChangeNotifiers';\r\nimport { useControllableReducer } from '../utils/useControllableReducer';\r\nimport { areArraysEqual } from '../utils/areArraysEqual';\r\nimport { useLatest } from '../utils/useLatest';\r\nimport { useTextNavigation } from '../utils/useTextNavigation';\r\nconst EMPTY_OBJECT = {};\r\nconst NOOP = () => {};\r\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\r\nconst defaultIsItemDisabled = () => false;\r\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\r\nconst defaultGetInitialState = () => ({\r\n  highlightedValue: null,\r\n  selectedValues: []\r\n});\r\n\r\n/**\r\n * The useList is a lower-level utility that is used to build list-like components.\r\n * It's used to manage the state of the list and its items.\r\n *\r\n * Supports highlighting a single item and selecting an arbitrary number of items.\r\n *\r\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\r\n * controlled from outside.\r\n *\r\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\r\n * Also the actions that can be dispatched and the reducer function can be defined externally.\r\n *\r\n * @template ItemValue The type of the item values.\r\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\r\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\r\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\r\n *\r\n * @ignore - internal hook.\r\n */\r\nfunction useList(params) {\r\n  const {\r\n    controlledProps = EMPTY_OBJECT,\r\n    disabledItemsFocusable = false,\r\n    disableListWrap = false,\r\n    focusManagement = 'activeDescendant',\r\n    getInitialState = defaultGetInitialState,\r\n    getItemDomElement,\r\n    getItemId,\r\n    isItemDisabled = defaultIsItemDisabled,\r\n    rootRef: externalListRef,\r\n    onStateChange = NOOP,\r\n    items,\r\n    itemComparer = defaultItemComparer,\r\n    getItemAsString = defaultItemStringifier,\r\n    onChange,\r\n    onHighlightChange,\r\n    onItemsChange,\r\n    orientation = 'vertical',\r\n    pageSize = 5,\r\n    reducerActionContext = EMPTY_OBJECT,\r\n    selectionMode = 'single',\r\n    stateReducer: externalReducer\r\n  } = params;\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\r\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\r\n    }\r\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\r\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\r\n    }\r\n  }\r\n  const listRef = React.useRef(null);\r\n  const handleRef = useForkRef(externalListRef, listRef);\r\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\r\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\r\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\r\n      var _getItemDomElement;\r\n      getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\r\n    }\r\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\r\n  const stateComparers = React.useMemo(() => ({\r\n    highlightedValue: itemComparer,\r\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\r\n  }), [itemComparer]);\r\n\r\n  // This gets called whenever a reducer changes the state.\r\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\r\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\r\n    switch (field) {\r\n      case 'highlightedValue':\r\n        handleHighlightChange(event, value, reason);\r\n        break;\r\n      case 'selectedValues':\r\n        onChange == null ? void 0 : onChange(event, value, reason);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [handleHighlightChange, onChange, onStateChange]);\r\n\r\n  // The following object is added to each action when it's dispatched.\r\n  // It's accessible in the reducer via the `action.context` field.\r\n  const listActionContext = React.useMemo(() => {\r\n    return {\r\n      disabledItemsFocusable,\r\n      disableListWrap,\r\n      focusManagement,\r\n      isItemDisabled,\r\n      itemComparer,\r\n      items,\r\n      getItemAsString,\r\n      onHighlightChange: handleHighlightChange,\r\n      orientation,\r\n      pageSize,\r\n      selectionMode,\r\n      stateComparers\r\n    };\r\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\r\n  const initialState = getInitialState();\r\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\r\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\r\n  const [state, dispatch] = useControllableReducer({\r\n    reducer,\r\n    actionContext,\r\n    initialState: initialState,\r\n    controlledProps,\r\n    stateComparers,\r\n    onStateChange: handleStateChange\r\n  });\r\n  const {\r\n    highlightedValue,\r\n    selectedValues\r\n  } = state;\r\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\r\n    type: ListActionTypes.textNavigation,\r\n    event,\r\n    searchString\r\n  }));\r\n\r\n  // introducing refs to avoid recreating the getItemState function on each change.\r\n  const latestSelectedValues = useLatest(selectedValues);\r\n  const latestHighlightedValue = useLatest(highlightedValue);\r\n  const previousItems = React.useRef([]);\r\n  React.useEffect(() => {\r\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\r\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\r\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: ListActionTypes.itemsChange,\r\n      event: null,\r\n      items,\r\n      previousItems: previousItems.current\r\n    });\r\n    previousItems.current = items;\r\n    onItemsChange == null ? void 0 : onItemsChange(items);\r\n  }, [items, itemComparer, dispatch, onItemsChange]);\r\n\r\n  // Subitems are notified of changes to the highlighted and selected values.\r\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\r\n  // Instead, we use a custom message bus to publish messages about changes.\r\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\r\n  const {\r\n    notifySelectionChanged,\r\n    notifyHighlightChanged,\r\n    registerHighlightChangeHandler,\r\n    registerSelectionChangeHandler\r\n  } = useListChangeNotifiers();\r\n  React.useEffect(() => {\r\n    notifySelectionChanged(selectedValues);\r\n  }, [selectedValues, notifySelectionChanged]);\r\n  React.useEffect(() => {\r\n    notifyHighlightChanged(highlightedValue);\r\n  }, [highlightedValue, notifyHighlightChanged]);\r\n  const createHandleKeyDown = other => event => {\r\n    var _other$onKeyDown;\r\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\r\n    if (orientation === 'vertical') {\r\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\r\n    } else {\r\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\r\n    }\r\n    if (focusManagement === 'activeDescendant') {\r\n      // When the child element is focused using the activeDescendant attribute,\r\n      // the list handles keyboard events on its behalf.\r\n      // We have to `preventDefault()` is this case to prevent the browser from\r\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\r\n      keysToPreventDefault.push(' ', 'Enter');\r\n    }\r\n    if (keysToPreventDefault.includes(event.key)) {\r\n      event.preventDefault();\r\n    }\r\n    dispatch({\r\n      type: ListActionTypes.keyDown,\r\n      key: event.key,\r\n      event\r\n    });\r\n    handleTextNavigation(event);\r\n  };\r\n  const createHandleBlur = other => event => {\r\n    var _other$onBlur, _listRef$current;\r\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\r\n      // focus remains within the list\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: ListActionTypes.blur,\r\n      event\r\n    });\r\n  };\r\n  const getRootProps = (otherHandlers = {}) => {\r\n    return _extends({}, otherHandlers, {\r\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\r\n      onBlur: createHandleBlur(otherHandlers),\r\n      onKeyDown: createHandleKeyDown(otherHandlers),\r\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\r\n      ref: handleRef\r\n    });\r\n  };\r\n  const getItemState = React.useCallback(item => {\r\n    var _latestSelectedValues;\r\n    const index = items.findIndex(i => itemComparer(i, item));\r\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\r\n    const disabled = isItemDisabled(item, index);\r\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\r\n    const focusable = focusManagement === 'DOM';\r\n    return {\r\n      disabled,\r\n      focusable,\r\n      highlighted,\r\n      index,\r\n      selected\r\n    };\r\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\r\n  const contextValue = React.useMemo(() => ({\r\n    dispatch,\r\n    getItemState,\r\n    registerHighlightChangeHandler,\r\n    registerSelectionChangeHandler\r\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\r\n  React.useDebugValue({\r\n    state\r\n  });\r\n  return {\r\n    contextValue,\r\n    dispatch,\r\n    getRootProps,\r\n    rootRef: handleRef,\r\n    state\r\n  };\r\n}\r\nexport { useList };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}